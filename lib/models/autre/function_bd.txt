import 'package:supabase_flutter/supabase_flutter.dart';
import '../class/note.dart';

final database = Supabase.instance.client;







function getPrefCuisine($email){
global $connexion;
$requete = $connexion->prepare("SELECT nomCuisine FROM PREFERER WHERE EMailPersonne = ? ");
$requete->execute([$email]);
$result = $requete->fetchAll();
return $result;
}

function ajoutePrefCuisine($email, $cuisine){
  global $connexion;
  $requete = $connexion->prepare("INSERT INTO PREFERER (EMailPersonne, nomCuisine) VALUES (?,?)");
  $requete->execute([$email, $cuisine]);
}






function getRegion($ville) {
// Exemple de simulation de donnÃ©es
global $connexion;
$resultat = [];
$requete = $connexion->prepare("SELECT * FROM COMMUNE NATURAL JOIN DEPARTEMENT NATURAL JOIN REGION WHERE NomCommune = ? ");
$requete->execute([$ville]);
$result = $requete->fetchAll();

foreach($result as $row){
array_push($resultat,[$row["nomdepartement"],$row["nomregion"]]);
}

return $resultat;
}



function lesNomsRegions($codeRegion, $codeDepartement, $codeCommune){
  global $connexion;
  $requete = $connexion->prepare("SELECT * FROM REGION NATURAL JOIN DEPARTEMENT NATURAL JOIN COMMUNE WHERE codeRegion = ? and codeDepartement = ? and codeCommune = ?");
  $requete->execute([$codeRegion, $codeDepartement, $codeCommune]);
  $result = $requete->fetch();

  return [$result['nomregion'],$result['nomdepartement'],$result['nomcommune']];
}










































function getrestauAll(){
global $connexion;
$requete = $connexion->prepare("SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy FROM RESTAURANT r LEFT JOIN NOTER n ON r.OsmID = n.OsmID LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion  GROUP BY r.OsmID;");
return traitement($requete);
}


function getrestByName($name="",$ville=""){
global $connexion;

if($name=="" && $ville==""){
$requete = $connexion->prepare("SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy FROM RESTAURANT r LEFT JOIN NOTER n ON r.OsmID = n.OsmID LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion  GROUP BY r.OsmID;");
} else{
$requete = $connexion->prepare('SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy FROM RESTAURANT r LEFT JOIN NOTER n ON r.OsmID = n.OsmID LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion where nomrestaurant LIKE '.$name.'% and nomcommune = '.$ville.'  GROUP BY r.OsmID;');
}
return traitement($requete);
}


function getNomCuisine(){
global $connexion;
$ListeNomCuisine = [];
$requete = $connexion->prepare("select nomcuisine from CUISINE ");
$requete->execute();
$resultat = $requete->fetchAll();

foreach($resultat as $row){
array_push($ListeNomCuisine, $row );
}
return $ListeNomCuisine;
}






function getRestoById($osmid){
global $connexion;
$requete = $connexion->prepare("SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy FROM RESTAURANT r LEFT JOIN NOTER n ON r.OsmID = n.OsmID LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion  WHERE r.OsmID = ? GROUP BY r.OsmID;");
$requete->execute([$osmid]);
$result = $requete->fetch();

$cuisine = [];
$requete2 = $connexion->prepare("select * from RESTAURANT natural join PREPARER where OsmID = ?");
$requete2->execute([$result["osmid"]]);
$resultat2 = $requete->fetchAll();

foreach($resultat2 as $row2){
array_push($cuisine,$row2["nomcuisine"]);
}

return new Restaurant($result["osmid"],
$result["nomrestaurant"],
($result["description"]==null) ? "" : $result["description"],
'$row["nomregion"]' ,
'$row["nomdepartement"]',
'$row["nomcommune"]',
$result["longitude"],
$result["latitude"],
($result["siteweb"]==null) ? "" : $result["siteweb"],
($result["facebook"]==null) ? "" : $result["facebook"],
($result["telrestaurant"]==null) ? "" : $result["telrestaurant"],
floatval($result["moy"]),
($result["capacite"]==null) ? 0 : $result["capacite"],
($result["fumeur"]==null) ? 0 : $result["fumeur"],
($result["drive"]==null) ? 0 : $result["drive"],
($result["aemporter"]==null) ? 0 : $result["aemporter"],
($result["livraison"]==null) ? 0 : $result["livraison"],
($result["vegetarien"]==null) ? 0 : $result["vegetarien"],
($result["horrairesouverture"]==null) ? "" : $result["horrairesouverture"],
$cuisine,
fetchNoteRestaurant($result["osmid"]));

}









































function getFavoris($email) {
global $connexion;

$sortie = [];

$requete = $connexion->prepare("SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy
FROM RESTAURANT r
LEFT JOIN NOTER n ON r.OsmID = n.OsmID
LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune
LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement
LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion
LEFT JOIN FAVORI f ON f.OsmID = r.OsmID
WHERE f.EMailPersonne = ?
GROUP BY r.OsmID
ORDER BY moy, r.OsmID;");
$requete->execute([$email]);
$resultat = $requete->fetchAll();

foreach ($resultat as $row) {
if (count($sortie) < 10) {

$localisation = lesNomsRegions($row["coderegion"], $row["codedepartement"], $row["codecommune"]);

$cuisine = [];
$requete2 = $connexion->prepare("SELECT * FROM RESTAURANT NATURAL JOIN PREPARER WHERE OsmID = ?");
$requete2->execute([$row["osmid"]]);
$resultat2 = $requete2->fetchAll();

foreach ($resultat2 as $row2) {
$cuisine[] = $row2["nomcuisine"];
}

$restaurant = new Restaurant(
$row["osmid"],
$row["nomrestaurant"],
($row["description"] == null) ? "" : $row["description"],
$localisation[0],
$localisation[1],
$localisation[2],
$row["longitude"],
$row["latitude"],
($row["siteweb"] == null) ? "" : $row["siteweb"],
($row["facebook"] == null) ? "" : $row["facebook"],
($row["telrestaurant"] == null) ? "" : $row["telrestaurant"],
floatval($row["moy"]),
($row["capacite"] == null) ? 0 : $row["capacite"],
($row["fumeur"] == null) ? 0 : $row["fumeur"],
($row["drive"] == null) ? 0 : $row["drive"],
($row["aemporter"] == null) ? 0 : $row["aemporter"],
($row["livraison"] == null) ? 0 : $row["livraison"],
($row["vegetarien"] == null) ? 0 : $row["vegetarien"],
($row["horrairesouverture"] == null) ? "" : $row["horrairesouverture"],
$cuisine,
fetchNoteRestaurant($row["osmid"])
);

$sortie[] = $restaurant;
}
}
return $sortie;
}






//creation
Future getMeilleurRestaurant(codeRegion, codeDepartement, codeCommune) async{
final response = await database
    .from('RESTAURANT')
    .select('user_id, count(*)')
    .eq('code_region', codeRegion)
    .eq('code_departement', codeDepartement)
    .eq('code_commune', codeCommune)
    .order('created_at', ascending: false)
    .limit(10);

SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy

FROM
RESTAURANT r
LEFT JOIN NOTER n ON r.OsmID = n.OsmID
LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune
LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement
LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion

WHERE c.codeRegion = ? and c.codeDepartement = ? and c.codeCommune = ? GROUP BY r.OsmID ORDER BY moy, r.OsmID;

List<dynamic> data = response;
List<Map<String, dynamic>> dataMap = await ConvertSelectToMap(data);
return dataMap;
}


function getMeilleurRestaurant($codeRegion, $codeDepartement, $codeCommune){




$requete = $connexion->prepare("SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy FROM RESTAURANT r LEFT JOIN NOTER n ON r.OsmID = n.OsmID LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion  WHERE c.codeRegion = ? and c.codeDepartement = ? and c.codeCommune = ? GROUP BY r.OsmID ORDER BY moy, r.OsmID;");
$requete->execute([$codeRegion, $codeDepartement, $codeCommune]);
$resultat = $requete->fetchAll();

foreach($resultat as $row){
if (count($sortie)<10) {

$cuisine = [];
$requete2 = $connexion->prepare("select * from RESTAURANT natural join PREPARER where OsmID = ?");
$requete2->execute([$row["osmid"]]);
$resultat2 = $requete->fetchAll();

foreach($resultat2 as $row2){
array_push($cuisine,$row2["nomcuisine"]);
}

$restaurant = new Restaurant($row["osmid"],
$row["nomrestaurant"],
($row["description"]==null) ? "" : $row["description"],
$localisation[0] ,
$localisation[1],
$localisation[2],
$row["longitude"],
$row["latitude"],
($row["siteweb"]==null) ? "" : $row["siteweb"],
($row["facebook"]==null) ? "" : $row["facebook"],
($row["telrestaurant"]==null) ? "" : $row["telrestaurant"],
floatval($row["moy"]),
($row["capacite"]==null) ? 0 : $row["capacite"],
($row["fumeur"]==null) ? 0 : $row["fumeur"],
($row["drive"]==null) ? 0 : $row["drive"],
($row["aemporter"]==null) ? 0 : $row["aemporter"],
($row["livraison"]==null) ? 0 : $row["livraison"],
($row["vegetarien"]==null) ? 0 : $row["vegetarien"],
($row["horrairesouverture"]==null) ? "" : $row["horrairesouverture"],
$cuisine,
fetchNoteRestaurant($row["osmid"]));

array_push($sortie, $restaurant);
}
}
return $sortie;
}


















function getRestaurantPopulaire($codeRegion, $codeDepartement, $codeCommune){
global $connexion;

$sortie = [];

$localisation = lesNomsRegions($codeRegion, $codeDepartement, $codeCommune);

$requete = $connexion->prepare("SELECT r.*, AVG(NULLIF(n.Note, 0)) AS moy, COUNT(n.Note) AS place FROM RESTAURANT r LEFT JOIN NOTER n ON r.OsmID = n.OsmID LEFT JOIN COMMUNE c ON r.CodeCommune = c.CodeCommune LEFT JOIN DEPARTEMENT d ON c.CodeDepartement = d.CodeDepartement LEFT JOIN REGION reg ON d.CodeRegion = reg.CodeRegion  WHERE c.codeRegion = ? and c.codeDepartement = ? and c.codeCommune = ? GROUP BY r.OsmID ORDER BY place,moy, r.OsmID;");
$requete->execute([$codeRegion, $codeDepartement, $codeCommune]);
$resultat = $requete->fetchAll();

foreach($resultat as $row){
if (count($sortie)<10) {

$cuisine = [];
$requete2 = $connexion->prepare("select * from RESTAURANT natural join PREPARER where OsmID = ?");
$requete2->execute([$row["osmid"]]);
$resultat2 = $requete->fetchAll();

foreach($resultat2 as $row2){
array_push($cuisine,$row2["nomcuisine"]);
}

$restaurant = new Restaurant($row["osmid"],
$row["nomrestaurant"],
($row["description"]==null) ? "" : $row["description"],
$localisation[0] ,
$localisation[1],
$localisation[2],
$row["longitude"],
$row["latitude"],
($row["siteweb"]==null) ? "" : $row["siteweb"],
($row["facebook"]==null) ? "" : $row["facebook"],
($row["telrestaurant"]==null) ? "" : $row["telrestaurant"],
floatval($row["moy"]),
($row["capacite"]==null) ? 0 : $row["capacite"],
($row["fumeur"]==null) ? 0 : $row["fumeur"],
($row["drive"]==null) ? 0 : $row["drive"],
($row["aemporter"]==null) ? 0 : $row["aemporter"],
($row["livraison"]==null) ? 0 : $row["livraison"],
($row["vegetarien"]==null) ? 0 : $row["vegetarien"],
($row["horrairesouverture"]==null) ? "" : $row["horrairesouverture"],
$cuisine,
fetchNoteRestaurant($row["osmid"]));

array_push($sortie, $restaurant);
}
}
return $sortie;
}

